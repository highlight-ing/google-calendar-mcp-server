{
  "version": 3,
  "sources": ["../src/index.ts", "../src/handlers/calendar.ts"],
  "sourcesContent": ["/**\n * Main entry point for the Google Calendar MCP Extism Plugin.\n * This file exports WebAssembly compatible functions that serve as entry points\n * for interacting with the Google Calendar API through the Extism runtime.\n */\nimport {\n  handleListEvents,\n  handleCreateEvent,\n  handleUpdateEvent,\n  handleDeleteEvent,\n} from \"./handlers/calendar\";\n\n/**\n * Lists calendar events from the user's Google Calendar.\n * Takes JSON input containing accessToken, maxResults (optional), daysBack (optional), and daysForward (optional).\n * @returns 0 on success, 1 on error\n */\nexport function list_events(): number {\n  return handleListEvents();\n}\n\n/**\n * Creates a new calendar event in the user's Google Calendar.\n * Takes JSON input containing accessToken, summary, location (optional), description (optional),\n * start, end, attendees (optional), and includeGoogleMeetDetails (optional).\n * @returns 0 on success, 1 on error\n */\nexport function create_event(): number {\n  return handleCreateEvent();\n}\n\n/**\n * Updates an existing calendar event in the user's Google Calendar.\n * Takes JSON input containing accessToken, eventId, summary (optional), location (optional), \n * description (optional), start (optional), end (optional), attendees (optional), \n * and includeGoogleMeetDetails (optional).\n * @returns 0 on success, 1 on error\n */\nexport function update_event(): number {\n  return handleUpdateEvent();\n}\n\n/**\n * Deletes a calendar event from the user's Google Calendar.\n * Takes JSON input containing accessToken and eventId.\n * @returns 0 on success, 1 on error\n */\nexport function delete_event(): number {\n  return handleDeleteEvent();\n} ", "/**\n * Calendar handling functions for interacting with the Google Calendar API.\n * Uses the Host and Http globals that are injected by the Extism runtime.\n */\n\n// Do NOT import Host or Http at the top level\u2014assume they are injected as globals.\n\n/**\n * Parses JSON input from the Host and returns the arguments as an object.\n * On failure, outputs an error message and returns null.\n * @returns Parsed arguments object or null if parsing fails\n */\nfunction getArgs(): any | null {\n  const input = Host.inputString();\n  try {\n    return JSON.parse(input);\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid JSON input\" }));\n    return null;\n  }\n}\n\n/**\n * Helper function to get event time range based on daysBack and daysForward parameters.\n */\nfunction getEventTimeRange(daysBack?: number, daysForward?: number) {\n  const timeMin = daysBack !== undefined \n    ? new Date(Date.now() - 1000 * 60 * 60 * 24 * daysBack).toISOString() \n    : undefined;\n  \n  const timeMax = daysForward !== undefined \n    ? new Date(Date.now() + 1000 * 60 * 60 * 24 * daysForward).toISOString() \n    : undefined;\n  \n  return { timeMin, timeMax };\n}\n\n/**\n * Handles listing events from the user's Google Calendar.\n * Fetches a list of events based on the provided parameters.\n * \n * @returns 0 on success, 1 on error\n */\nexport function handleListEvents(): number {\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { \n    accessToken, \n    maxResults = 10, \n    daysBack = 0, \n    daysForward \n  } = args;\n\n  const { timeMin, timeMax } = getEventTimeRange(daysBack, daysForward);\n\n  const timeMinParam = timeMin ? `&timeMin=${timeMin}` : '';\n  const timeMaxParam = timeMax ? `&timeMax=${timeMax}` : '';\n  const maxResultsParam = maxResults ? `&maxResults=${maxResults}` : '';\n\n  // Construct URL for listing events\n  const url = 'https://www.googleapis.com/calendar/v3/calendars/primary/events?' +\n    'orderBy=startTime&singleEvents=true' +\n    timeMinParam +\n    timeMaxParam +\n    maxResultsParam;\n\n  const response = Http.request({\n    url: url,\n    method: \"GET\",\n    headers: { \"Authorization\": `Bearer ${accessToken}` }\n  });\n\n  if (response.status !== 200) {\n    Host.outputString(JSON.stringify({ error: `Failed to fetch events: ${response.body}` }));\n    return 1;\n  }\n\n  let data;\n  try {\n    data = JSON.parse(response.body);\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid response from Google Calendar API\" }));\n    return 1;\n  }\n\n  const events = data.items?.map((event: any) => ({\n    id: event.id,\n    summary: event.summary,\n    start: event.start,\n    end: event.end,\n    location: event.location,\n  })) || [];\n\n  Host.outputString(JSON.stringify(events, null, 2));\n  return 0;\n}\n\n/**\n * Handles creating a new event in the user's Google Calendar.\n * \n * @returns 0 on success, 1 on error\n */\nexport function handleCreateEvent(): number {\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { \n    accessToken, \n    summary, \n    location, \n    description, \n    start, \n    end, \n    attendees = [],\n    includeGoogleMeetDetails = false \n  } = args;\n\n  // Validate required parameters\n  if (!summary || !start || !end) {\n    Host.outputString(JSON.stringify({ error: \"Missing required parameters: summary, start, and end are required\" }));\n    return 1;\n  }\n\n  // Generate a UUID for the conference request ID if needed\n  const conferenceRequestId = includeGoogleMeetDetails \n    ? Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n    : undefined;\n\n  const event = {\n    summary,\n    location,\n    description,\n    start: {\n      dateTime: start,\n      timeZone: 'UTC', // Use UTC as default timezone\n    },\n    end: {\n      dateTime: end,\n      timeZone: 'UTC', // Use UTC as default timezone\n    },\n    attendees: attendees.map((email: string) => ({ email })),\n    conferenceData: includeGoogleMeetDetails\n      ? {\n          createRequest: {\n            conferenceSolutionKey: {\n              type: 'hangoutsMeet',\n            },\n            requestId: conferenceRequestId,\n          },\n        }\n      : undefined,\n  };\n\n  const conferenceDataVersion = includeGoogleMeetDetails ? '1' : '0';\n\n  const response = Http.request({\n    url: `https://www.googleapis.com/calendar/v3/calendars/primary/events?conferenceDataVersion=${conferenceDataVersion}`,\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(event),\n  });\n\n  if (response.status !== 200) {\n    Host.outputString(JSON.stringify({ error: `Failed to create event: ${response.body}` }));\n    return 1;\n  }\n\n  let data;\n  try {\n    data = JSON.parse(response.body);\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid response from Google Calendar API\" }));\n    return 1;\n  }\n\n  Host.outputString(JSON.stringify({ id: data.id, message: \"Event created successfully\" }, null, 2));\n  return 0;\n}\n\n/**\n * Handles updating an existing event in the user's Google Calendar.\n * \n * @returns 0 on success, 1 on error\n */\nexport function handleUpdateEvent(): number {\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { \n    accessToken, \n    eventId, \n    summary, \n    location, \n    description, \n    start, \n    end, \n    attendees, \n    includeGoogleMeetDetails = false \n  } = args;\n\n  // Validate required parameters\n  if (!eventId) {\n    Host.outputString(JSON.stringify({ error: \"Missing required parameter: eventId\" }));\n    return 1;\n  }\n\n  const event: any = {};\n  if (summary !== undefined) event.summary = summary;\n  if (location !== undefined) event.location = location;\n  if (description !== undefined) event.description = description;\n  \n  if (start !== undefined) {\n    event.start = {\n      dateTime: start,\n      timeZone: 'UTC', // Use UTC as default timezone\n    };\n  }\n  \n  if (end !== undefined) {\n    event.end = {\n      dateTime: end,\n      timeZone: 'UTC', // Use UTC as default timezone\n    };\n  }\n  \n  if (attendees !== undefined) {\n    event.attendees = attendees.map((email: string) => ({ email }));\n  }\n\n  const conferenceDataVersion = includeGoogleMeetDetails ? '1' : '0';\n\n  const response = Http.request({\n    url: `https://www.googleapis.com/calendar/v3/calendars/primary/events/${eventId}?conferenceDataVersion=${conferenceDataVersion}`,\n    method: \"PATCH\",\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(event),\n  });\n\n  if (response.status !== 200) {\n    Host.outputString(JSON.stringify({ error: `Failed to update event: ${response.body}` }));\n    return 1;\n  }\n\n  let data;\n  try {\n    data = JSON.parse(response.body);\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid response from Google Calendar API\" }));\n    return 1;\n  }\n\n  Host.outputString(JSON.stringify({ id: data.id, message: \"Event updated successfully\" }, null, 2));\n  return 0;\n}\n\n/**\n * Handles deleting an event from the user's Google Calendar.\n * \n * @returns 0 on success, 1 on error\n */\nexport function handleDeleteEvent(): number {\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { accessToken, eventId } = args;\n\n  // Validate required parameters\n  if (!eventId) {\n    Host.outputString(JSON.stringify({ error: \"Missing required parameter: eventId\" }));\n    return 1;\n  }\n\n  const response = Http.request({\n    url: `https://www.googleapis.com/calendar/v3/calendars/primary/events/${eventId}`,\n    method: \"DELETE\",\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`,\n    },\n  });\n\n  if (response.status !== 204 && response.status !== 200) {\n    Host.outputString(JSON.stringify({ error: `Failed to delete event: ${response.body}` }));\n    return 1;\n  }\n\n  Host.outputString(JSON.stringify({ message: \"Event deleted successfully\" }, null, 2));\n  return 0;\n} "],
  "mappings": "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",
  "names": []
}
