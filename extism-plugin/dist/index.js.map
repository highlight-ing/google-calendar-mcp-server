{
  "version": 3,
  "sources": ["../src/index.ts", "../src/pdk.ts", "../src/handlers/calendar.ts", "../src/main.ts"],
  "sourcesContent": ["import * as main from \"./main\";\n\nimport { CallToolRequest, CallToolResult, ListToolsResult } from \"./pdk\";\n\nexport function call(): number {\n  const untypedInput = JSON.parse(Host.inputString());\n  const input = CallToolRequest.fromJson(untypedInput);\n\n  const output = main.callImpl(input);\n\n  const untypedOutput = CallToolResult.toJson(output);\n  Host.outputString(JSON.stringify(untypedOutput));\n\n  return 0;\n}\n\nexport function describe(): number {\n  const output = main.describeImpl();\n\n  const untypedOutput = ListToolsResult.toJson(output);\n  Host.outputString(JSON.stringify(untypedOutput));\n\n  return 0;\n}\n", "/**\n * Types for the Plugin Development Kit (PDK)\n * These types define the interface between the Extism runtime and the plugin.\n */\n\n/**\n * Request to call a specific tool\n */\nexport class CallToolRequest {\n  toolId: string;\n  arguments: Record<string, any>;\n  \n  constructor(toolId: string, arguments_: Record<string, any>) {\n    this.toolId = toolId;\n    this.arguments = arguments_;\n  }\n  \n  static fromJson(json: any): CallToolRequest {\n    return new CallToolRequest(json.toolId, json.arguments || {});\n  }\n  \n  static toJson(request: CallToolRequest): any {\n    return {\n      toolId: request.toolId,\n      arguments: request.arguments\n    };\n  }\n}\n\n/**\n * Result of calling a tool\n */\nexport class CallToolResult {\n  state: string;\n  result: any;\n  error?: string;\n  \n  constructor(state: string, result: any, error?: string) {\n    this.state = state;\n    this.result = result;\n    this.error = error;\n  }\n  \n  static fromJson(json: any): CallToolResult {\n    return new CallToolResult(json.state, json.result, json.error);\n  }\n  \n  static toJson(result: CallToolResult): any {\n    const json: any = {\n      state: result.state,\n      result: result.result\n    };\n    if (result.error) {\n      json.error = result.error;\n    }\n    return json;\n  }\n}\n\n/**\n * Tool description\n */\nexport class Tool {\n  id: string;\n  label: string;\n  description: string;\n  parameters: Record<string, any>;\n  \n  constructor(id: string, label: string, description: string, parameters: Record<string, any>) {\n    this.id = id;\n    this.label = label;\n    this.description = description;\n    this.parameters = parameters;\n  }\n  \n  static fromJson(json: any): Tool {\n    return new Tool(\n      json.id,\n      json.label,\n      json.description,\n      json.parameters || {}\n    );\n  }\n  \n  static toJson(tool: Tool): any {\n    return {\n      id: tool.id,\n      label: tool.label,\n      description: tool.description,\n      parameters: tool.parameters\n    };\n  }\n}\n\n/**\n * Result of listing available tools\n */\nexport class ListToolsResult {\n  tools: Tool[];\n  \n  constructor(tools: Tool[]) {\n    this.tools = tools;\n  }\n  \n  static fromJson(json: any): ListToolsResult {\n    const tools = (json.tools || []).map((t: any) => Tool.fromJson(t));\n    return new ListToolsResult(tools);\n  }\n  \n  static toJson(result: ListToolsResult): any {\n    return {\n      tools: result.tools.map(t => Tool.toJson(t))\n    };\n  }\n} ", "/**\n * Calendar handling functions for interacting with the Google Calendar API.\n * Uses the Host and Http globals that are injected by the Extism runtime.\n */\n\n// Do NOT import Host or Http at the top level\u2014assume they are injected as globals.\n\n/**\n * Parses JSON input from the Host and returns the arguments as an object.\n * On failure, outputs an error message and returns null.\n * @returns Parsed arguments object or null if parsing fails\n */\nfunction getArgs(): any | null {\n  try {\n    const input = Host.inputString();\n    const args = JSON.parse(input);\n    return args;\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid JSON input\" }));\n    return null;\n  }\n}\n\n/**\n * Helper function to get event time range based on daysBack and daysForward parameters.\n */\nfunction getEventTimeRange(daysBack?: number, daysForward?: number) {\n  const timeMin = daysBack !== undefined \n    ? new Date(Date.now() - 1000 * 60 * 60 * 24 * daysBack).toISOString() \n    : undefined;\n  \n  const timeMax = daysForward !== undefined \n    ? new Date(Date.now() + 1000 * 60 * 60 * 24 * daysForward).toISOString() \n    : undefined;\n  \n  return { timeMin, timeMax };\n}\n\n/**\n * Handles listing events from the user's Google Calendar.\n * Fetches a list of events based on the provided parameters.\n * \n * @returns 0 on success, 1 on error\n */\nexport function handleListEvents(): number {\n  try {\n    // Just output a simple test message to confirm the plugin is working\n    Host.outputString(JSON.stringify({ \n      status: \"success\", \n      message: \"Plugin is working correctly\", \n      note: \"This is a test response to verify Extism runtime\" \n    }, null, 2));\n    return 0;\n  } catch (error: any) {\n    Host.outputString(JSON.stringify({ \n      error: `Error in test plugin: ${error.message || \"Unknown error\"}` \n    }));\n    return 1;\n  }\n}\n\n/**\n * Handles creating a new event in the user's Google Calendar.\n * \n * @returns 0 on success, 1 on error\n */\nexport function handleCreateEvent(): number {\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { \n    accessToken, \n    summary, \n    location, \n    description, \n    start, \n    end, \n    attendees = [],\n    includeGoogleMeetDetails = false \n  } = args;\n\n  // Validate required parameters\n  if (!summary || !start || !end) {\n    Host.outputString(JSON.stringify({ error: \"Missing required parameters: summary, start, and end are required\" }));\n    return 1;\n  }\n\n  // Generate a UUID for the conference request ID if needed\n  const conferenceRequestId = includeGoogleMeetDetails \n    ? Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n    : undefined;\n\n  const event = {\n    summary,\n    location,\n    description,\n    start: {\n      dateTime: start,\n      timeZone: 'UTC', // Use UTC as default timezone\n    },\n    end: {\n      dateTime: end,\n      timeZone: 'UTC', // Use UTC as default timezone\n    },\n    attendees: attendees.map((email: string) => ({ email })),\n    conferenceData: includeGoogleMeetDetails\n      ? {\n          createRequest: {\n            conferenceSolutionKey: {\n              type: 'hangoutsMeet',\n            },\n            requestId: conferenceRequestId,\n          },\n        }\n      : undefined,\n  };\n\n  const conferenceDataVersion = includeGoogleMeetDetails ? '1' : '0';\n\n  const response = Http.request({\n    url: `https://www.googleapis.com/calendar/v3/calendars/primary/events?conferenceDataVersion=${conferenceDataVersion}`,\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(event),\n  });\n\n  if (response.status !== 200) {\n    Host.outputString(JSON.stringify({ error: `Failed to create event: ${response.body}` }));\n    return 1;\n  }\n\n  let data;\n  try {\n    data = JSON.parse(response.body);\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid response from Google Calendar API\" }));\n    return 1;\n  }\n\n  Host.outputString(JSON.stringify({ id: data.id, message: \"Event created successfully\" }, null, 2));\n  return 0;\n}\n\n/**\n * Handles updating an existing event in the user's Google Calendar.\n * \n * @returns 0 on success, 1 on error\n */\nexport function handleUpdateEvent(): number {\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { \n    accessToken, \n    eventId, \n    summary, \n    location, \n    description, \n    start, \n    end, \n    attendees, \n    includeGoogleMeetDetails = false \n  } = args;\n\n  // Validate required parameters\n  if (!eventId) {\n    Host.outputString(JSON.stringify({ error: \"Missing required parameter: eventId\" }));\n    return 1;\n  }\n\n  const event: any = {};\n  if (summary !== undefined) event.summary = summary;\n  if (location !== undefined) event.location = location;\n  if (description !== undefined) event.description = description;\n  \n  if (start !== undefined) {\n    event.start = {\n      dateTime: start,\n      timeZone: 'UTC', // Use UTC as default timezone\n    };\n  }\n  \n  if (end !== undefined) {\n    event.end = {\n      dateTime: end,\n      timeZone: 'UTC', // Use UTC as default timezone\n    };\n  }\n  \n  if (attendees !== undefined) {\n    event.attendees = attendees.map((email: string) => ({ email }));\n  }\n\n  const conferenceDataVersion = includeGoogleMeetDetails ? '1' : '0';\n\n  const response = Http.request({\n    url: `https://www.googleapis.com/calendar/v3/calendars/primary/events/${eventId}?conferenceDataVersion=${conferenceDataVersion}`,\n    method: \"PATCH\",\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(event),\n  });\n\n  if (response.status !== 200) {\n    Host.outputString(JSON.stringify({ error: `Failed to update event: ${response.body}` }));\n    return 1;\n  }\n\n  let data;\n  try {\n    data = JSON.parse(response.body);\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid response from Google Calendar API\" }));\n    return 1;\n  }\n\n  Host.outputString(JSON.stringify({ id: data.id, message: \"Event updated successfully\" }, null, 2));\n  return 0;\n}\n\n/**\n * Handles deleting an event from the user's Google Calendar.\n * \n * @returns 0 on success, 1 on error\n */\nexport function handleDeleteEvent(): number {\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { accessToken, eventId } = args;\n\n  // Validate required parameters\n  if (!eventId) {\n    Host.outputString(JSON.stringify({ error: \"Missing required parameter: eventId\" }));\n    return 1;\n  }\n\n  const response = Http.request({\n    url: `https://www.googleapis.com/calendar/v3/calendars/primary/events/${eventId}`,\n    method: \"DELETE\",\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`,\n    },\n  });\n\n  if (response.status !== 204 && response.status !== 200) {\n    Host.outputString(JSON.stringify({ error: `Failed to delete event: ${response.body}` }));\n    return 1;\n  }\n\n  Host.outputString(JSON.stringify({ message: \"Event deleted successfully\" }, null, 2));\n  return 0;\n} ", "/**\n * Main implementation for the Google Calendar Extism Plugin.\n * This file contains the core implementation that processes the requests from the host.\n */\nimport {\n  CallToolRequest,\n  CallToolResult,\n  ListToolsResult,\n  Tool\n} from \"./pdk\";\n\nimport {\n  handleListEvents,\n  handleCreateEvent,\n  handleUpdateEvent,\n  handleDeleteEvent\n} from \"./handlers/calendar\";\n\n/**\n * Implementation of the call function that routes requests to the appropriate handler.\n * @param request The request to process\n * @returns The result of processing the request\n */\nexport function callImpl(request: CallToolRequest): CallToolResult {\n  try {\n    // Set up input for the handlers\n    const originalInputString = Host.inputString;\n    let outputContent: string = \"\";\n    \n    // Override Host.inputString and Host.outputString for the handlers\n    Host.inputString = () => JSON.stringify(request.arguments);\n    const originalOutputString = Host.outputString;\n    Host.outputString = (content: string) => {\n      outputContent = content;\n      return content;\n    };\n    \n    let result: number = 1;\n    \n    // Route the request to the appropriate handler based on the toolId\n    switch (request.toolId) {\n      case \"list_events\":\n        result = handleListEvents();\n        break;\n        \n      case \"create_event\":\n        result = handleCreateEvent();\n        break;\n        \n      case \"update_event\":\n        result = handleUpdateEvent();\n        break;\n        \n      case \"delete_event\":\n        result = handleDeleteEvent();\n        break;\n        \n      default:\n        // Restore original methods\n        Host.inputString = originalInputString;\n        Host.outputString = originalOutputString;\n        return new CallToolResult(\"error\", null, `Unknown tool: ${request.toolId}`);\n    }\n    \n    // Restore original methods\n    Host.inputString = originalInputString;\n    Host.outputString = originalOutputString;\n    \n    // Process result\n    if (result === 0) {\n      try {\n        const parsedOutput = JSON.parse(outputContent);\n        return new CallToolResult(\"success\", parsedOutput, undefined);\n      } catch (e) {\n        return new CallToolResult(\"success\", outputContent, undefined);\n      }\n    } else {\n      try {\n        const parsedError = JSON.parse(outputContent);\n        return new CallToolResult(\"error\", null, parsedError.error || \"Unknown error\");\n      } catch (e) {\n        return new CallToolResult(\"error\", null, \"Failed to process Calendar request\");\n      }\n    }\n  } catch (err) {\n    return new CallToolResult(\"error\", null, `Error: ${err instanceof Error ? err.message : String(err)}`);\n  }\n}\n\n/**\n * Implementation of the describe function that returns the list of available tools.\n * @returns A list of available tools\n */\nexport function describeImpl(): ListToolsResult {\n  const tools: Tool[] = [\n    new Tool(\n      \"list_events\",\n      \"List Calendar Events\",\n      \"Lists events from the user's Google Calendar\",\n      {\n        accessToken: { type: \"string\", description: \"OAuth2 access token\" },\n        maxResults: { type: \"number\", description: \"Maximum number of events to return\", optional: true },\n        daysBack: { type: \"number\", description: \"Number of days to look back\", optional: true },\n        daysForward: { type: \"number\", description: \"Number of days to look forward\", optional: true }\n      }\n    ),\n    new Tool(\n      \"create_event\",\n      \"Create Calendar Event\",\n      \"Creates a new event in the user's Google Calendar\",\n      {\n        accessToken: { type: \"string\", description: \"OAuth2 access token\" },\n        summary: { type: \"string\", description: \"Event title\" },\n        location: { type: \"string\", description: \"Event location\", optional: true },\n        description: { type: \"string\", description: \"Event description\", optional: true },\n        start: { type: \"string\", description: \"Start time (ISO format)\" },\n        end: { type: \"string\", description: \"End time (ISO format)\" },\n        attendees: { type: \"array\", description: \"List of attendee email addresses\", optional: true },\n        includeGoogleMeetDetails: { type: \"boolean\", description: \"Whether to include Google Meet details\", optional: true }\n      }\n    ),\n    new Tool(\n      \"update_event\",\n      \"Update Calendar Event\",\n      \"Updates an existing event in the user's Google Calendar\",\n      {\n        accessToken: { type: \"string\", description: \"OAuth2 access token\" },\n        eventId: { type: \"string\", description: \"ID of the event to update\" },\n        summary: { type: \"string\", description: \"Event title\", optional: true },\n        location: { type: \"string\", description: \"Event location\", optional: true },\n        description: { type: \"string\", description: \"Event description\", optional: true },\n        start: { type: \"string\", description: \"Start time (ISO format)\", optional: true },\n        end: { type: \"string\", description: \"End time (ISO format)\", optional: true },\n        attendees: { type: \"array\", description: \"List of attendee email addresses\", optional: true },\n        includeGoogleMeetDetails: { type: \"boolean\", description: \"Whether to include Google Meet details\", optional: true }\n      }\n    ),\n    new Tool(\n      \"delete_event\",\n      \"Delete Calendar Event\",\n      \"Deletes an event from the user's Google Calendar\",\n      {\n        accessToken: { type: \"string\", description: \"OAuth2 access token\" },\n        eventId: { type: \"string\", description: \"ID of the event to delete\" }\n      }\n    )\n  ];\n  \n  return new ListToolsResult(tools);\n} "],
  "mappings": "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",
  "names": []
}
