{
  "version": 3,
  "sources": ["../src/index.ts", "../src/pdk.ts", "../src/handlers/calendar.ts", "../src/main.ts"],
  "sourcesContent": ["import * as main from \"./main\";\n\nimport { CallToolRequest, CallToolResult, ListToolsResult } from \"./pdk\";\n\nexport function call(): number {\n  const untypedInput = JSON.parse(Host.inputString());\n  const input = CallToolRequest.fromJson(untypedInput);\n\n  const output = main.callImpl(input);\n\n  const untypedOutput = CallToolResult.toJson(output);\n  Host.outputString(JSON.stringify(untypedOutput));\n\n  return 0;\n}\n\nexport function describe(): number {\n  const output = main.describeImpl();\n\n  const untypedOutput = ListToolsResult.toJson(output);\n  Host.outputString(JSON.stringify(untypedOutput));\n\n  return 0;\n}\n", "/**\n * Types for the Plugin Development Kit (PDK)\n * These types define the interface between the Extism runtime and the plugin.\n */\n\n/**\n * Request to call a specific tool\n */\nexport class CallToolRequest {\n  toolId: string;\n  arguments: Record<string, any>;\n  \n  constructor(toolId: string, arguments_: Record<string, any>) {\n    this.toolId = toolId;\n    this.arguments = arguments_;\n  }\n  \n  static fromJson(json: any): CallToolRequest {\n    return new CallToolRequest(json.toolId, json.arguments || {});\n  }\n  \n  static toJson(request: CallToolRequest): any {\n    return {\n      toolId: request.toolId,\n      arguments: request.arguments\n    };\n  }\n}\n\n/**\n * Result of calling a tool\n */\nexport class CallToolResult {\n  state: string;\n  result: any;\n  error?: string;\n  \n  constructor(state: string, result: any, error?: string) {\n    this.state = state;\n    this.result = result;\n    this.error = error;\n  }\n  \n  static fromJson(json: any): CallToolResult {\n    return new CallToolResult(json.state, json.result, json.error);\n  }\n  \n  static toJson(result: CallToolResult): any {\n    const json: any = {\n      state: result.state,\n      result: result.result\n    };\n    if (result.error) {\n      json.error = result.error;\n    }\n    return json;\n  }\n}\n\n/**\n * Tool description\n */\nexport class Tool {\n  id: string;\n  label: string;\n  description: string;\n  parameters: Record<string, any>;\n  \n  constructor(id: string, label: string, description: string, parameters: Record<string, any>) {\n    this.id = id;\n    this.label = label;\n    this.description = description;\n    this.parameters = parameters;\n  }\n  \n  static fromJson(json: any): Tool {\n    return new Tool(\n      json.id,\n      json.label,\n      json.description,\n      json.parameters || {}\n    );\n  }\n  \n  static toJson(tool: Tool): any {\n    return {\n      id: tool.id,\n      label: tool.label,\n      description: tool.description,\n      parameters: tool.parameters\n    };\n  }\n}\n\n/**\n * Result of listing available tools\n */\nexport class ListToolsResult {\n  tools: any[];\n  \n  constructor(tools: any[]) {\n    this.tools = tools;\n  }\n  \n  static fromJson(json: any): ListToolsResult {\n    return new ListToolsResult(json.tools || []);\n  }\n  \n  static toJson(result: ListToolsResult): any {\n    return {\n      tools: result.tools\n    };\n  }\n} ", "/**\n * Calendar handling functions for interacting with the Google Calendar API.\n * Uses the Host and Http globals that are injected by the Extism runtime.\n */\n\n// Do NOT import Host or Http at the top level\u2014assume they are injected as globals.\n\n/**\n * Parses JSON input from the Host and returns the arguments as an object.\n * On failure, outputs an error message and returns null.\n * @returns Parsed arguments object or null if parsing fails\n */\nfunction getArgs(): any | null {\n  try {\n    const input = Host.inputString();\n    const args = JSON.parse(input);\n    return args;\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid JSON input\" }));\n    return null;\n  }\n}\n\n/**\n * Helper function to get event time range based on daysBack and daysForward parameters.\n */\nfunction getEventTimeRange(daysBack?: number, daysForward?: number) {\n  const timeMin =\n    daysBack !== undefined\n      ? new Date(Date.now() - 1000 * 60 * 60 * 24 * daysBack).toISOString()\n      : undefined;\n\n  const timeMax =\n    daysForward !== undefined\n      ? new Date(Date.now() + 1000 * 60 * 60 * 24 * daysForward).toISOString()\n      : undefined;\n\n  return { timeMin, timeMax };\n}\n\n/**\n * Handles listing events from the user's Google Calendar.\n * Fetches a list of events based on the provided parameters.\n *\n * @returns 0 on success, 1 on error\n */\nexport function handleListEvents(): number {\n  try {\n    const accessToken = Config.get(\"GOOGLE_ACCESS_TOKEN\");\n    if (!accessToken) {\n      Host.outputString(\n        JSON.stringify({\n          error: \"Missing required Google access token\",\n        })\n      );\n      return 1;\n    }\n\n    const args = getArgs();\n    if (!args) return 1;\n\n    const { maxResults = 10, daysBack, daysForward, calendarId = \"primary\" } = args;\n    const { timeMin, timeMax } = getEventTimeRange(daysBack, daysForward);\n\n    // Build URL with query parameters\n    let url = `https://www.googleapis.com/calendar/v3/calendars/${encodeURIComponent(calendarId)}/events?maxResults=${maxResults}`;\n    if (timeMin) url += `&timeMin=${encodeURIComponent(timeMin)}`;\n    if (timeMax) url += `&timeMax=${encodeURIComponent(timeMax)}`;\n    url += `&orderBy=startTime&singleEvents=true`;\n\n    const response = Http.request({\n      url,\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (response.status !== 200) {\n      Host.outputString(\n        JSON.stringify({\n          error: `Failed to list events: ${response.body}`,\n          status: response.status\n        })\n      );\n      return 1;\n    }\n\n    let data;\n    try {\n      data = JSON.parse(response.body);\n      \n      // Process events to create a more user-friendly format\n      const events = data.items.map((event: any) => {\n        return {\n          id: event.id,\n          summary: event.summary,\n          description: event.description,\n          location: event.location,\n          start: event.start,\n          end: event.end,\n          organizer: event.organizer,\n          attendees: event.attendees,\n          htmlLink: event.htmlLink,\n          conferenceData: event.conferenceData\n        };\n      });\n      \n      Host.outputString(\n        JSON.stringify(\n          {\n            events,\n            nextPageToken: data.nextPageToken\n          },\n          null,\n          2\n        )\n      );\n      return 0;\n    } catch (err) {\n      Host.outputString(\n        JSON.stringify({\n          error: \"Invalid response from Google Calendar API\",\n          details: err instanceof Error ? err.message : String(err)\n        })\n      );\n      return 1;\n    }\n  } catch (error: any) {\n    Host.outputString(\n      JSON.stringify({\n        error: `Error listing events: ${error.message || \"Unknown error\"}`,\n      })\n    );\n    return 1;\n  }\n}\n\n/**\n * Handles creating a new event in the user's Google Calendar.\n *\n * @returns 0 on success, 1 on error\n */\nexport function handleCreateEvent(): number {\n  const accessToken = Config.get(\"GOOGLE_ACCESS_TOKEN\");\n\n  const args = getArgs();\n  if (!args) return 1;\n\n  const {\n    summary,\n    location,\n    description,\n    start,\n    end,\n    attendees = [],\n    includeGoogleMeetDetails = false,\n  } = args;\n\n  // Validate required parameters\n  if (!summary || !start || !end) {\n    Host.outputString(\n      JSON.stringify({\n        error:\n          \"Missing required parameters: summary, start, and end are required\",\n      })\n    );\n    return 1;\n  }\n\n  // Generate a UUID for the conference request ID if needed\n  const conferenceRequestId = includeGoogleMeetDetails\n    ? Math.random().toString(36).substring(2, 15) +\n      Math.random().toString(36).substring(2, 15)\n    : undefined;\n\n  const event = {\n    summary,\n    location,\n    description,\n    start: {\n      dateTime: start,\n      timeZone: \"UTC\", // Use UTC as default timezone\n    },\n    end: {\n      dateTime: end,\n      timeZone: \"UTC\", // Use UTC as default timezone\n    },\n    attendees: attendees.map((email: string) => ({ email })),\n    conferenceData: includeGoogleMeetDetails\n      ? {\n          createRequest: {\n            conferenceSolutionKey: {\n              type: \"hangoutsMeet\",\n            },\n            requestId: conferenceRequestId,\n          },\n        }\n      : undefined,\n  };\n\n  const conferenceDataVersion = includeGoogleMeetDetails ? \"1\" : \"0\";\n\n  const response = Http.request(\n    {\n      url: `https://www.googleapis.com/calendar/v3/calendars/primary/events?conferenceDataVersion=${conferenceDataVersion}`,\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    JSON.stringify(event)\n  );\n\n  if (response.status !== 200) {\n    Host.outputString(\n      JSON.stringify({ error: `Failed to create event: ${response.body}` })\n    );\n    return 1;\n  }\n\n  let data;\n  try {\n    data = JSON.parse(response.body);\n  } catch (err) {\n    Host.outputString(\n      JSON.stringify({ error: \"Invalid response from Google Calendar API\" })\n    );\n    return 1;\n  }\n\n  Host.outputString(\n    JSON.stringify(\n      { id: data.id, message: \"Event created successfully\" },\n      null,\n      2\n    )\n  );\n  return 0;\n}\n\n/**\n * Handles updating an existing event in the user's Google Calendar.\n *\n * @returns 0 on success, 1 on error\n */\nexport function handleUpdateEvent(): number {\n  const accessToken = Config.get(\"GOOGLE_ACCESS_TOKEN\");\n\n  const args = getArgs();\n  if (!args) return 1;\n\n  const {\n    eventId,\n    summary,\n    location,\n    description,\n    start,\n    end,\n    attendees,\n    includeGoogleMeetDetails = false,\n  } = args;\n\n  // Validate required parameters\n  if (!eventId) {\n    Host.outputString(\n      JSON.stringify({ error: \"Missing required parameter: eventId\" })\n    );\n    return 1;\n  }\n\n  const event: any = {};\n  if (summary !== undefined) event.summary = summary;\n  if (location !== undefined) event.location = location;\n  if (description !== undefined) event.description = description;\n\n  if (start !== undefined) {\n    event.start = {\n      dateTime: start,\n      timeZone: \"UTC\", // Use UTC as default timezone\n    };\n  }\n\n  if (end !== undefined) {\n    event.end = {\n      dateTime: end,\n      timeZone: \"UTC\", // Use UTC as default timezone\n    };\n  }\n\n  if (attendees !== undefined) {\n    event.attendees = attendees.map((email: string) => ({ email }));\n  }\n\n  const conferenceDataVersion = includeGoogleMeetDetails ? \"1\" : \"0\";\n\n  const response = Http.request(\n    {\n      url: `https://www.googleapis.com/calendar/v3/calendars/primary/events/${eventId}?conferenceDataVersion=${conferenceDataVersion}`,\n      method: \"PATCH\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    JSON.stringify(event)\n  );\n\n  if (response.status !== 200) {\n    Host.outputString(\n      JSON.stringify({ error: `Failed to update event: ${response.body}` })\n    );\n    return 1;\n  }\n\n  let data;\n  try {\n    data = JSON.parse(response.body);\n  } catch (err) {\n    Host.outputString(\n      JSON.stringify({ error: \"Invalid response from Google Calendar API\" })\n    );\n    return 1;\n  }\n\n  Host.outputString(\n    JSON.stringify(\n      { id: data.id, message: \"Event updated successfully\" },\n      null,\n      2\n    )\n  );\n  return 0;\n}\n\n/**\n * Handles deleting an event from the user's Google Calendar.\n *\n * @returns 0 on success, 1 on error\n */\nexport function handleDeleteEvent(): number {\n  const accessToken = Config.get(\"GOOGLE_ACCESS_TOKEN\");\n\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { eventId } = args;\n\n  // Validate required parameters\n  if (!eventId) {\n    Host.outputString(\n      JSON.stringify({ error: \"Missing required parameter: eventId\" })\n    );\n    return 1;\n  }\n\n  const response = Http.request({\n    url: `https://www.googleapis.com/calendar/v3/calendars/primary/events/${eventId}`,\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n\n  if (response.status !== 204 && response.status !== 200) {\n    Host.outputString(\n      JSON.stringify({ error: `Failed to delete event: ${response.body}` })\n    );\n    return 1;\n  }\n\n  Host.outputString(\n    JSON.stringify({ message: \"Event deleted successfully\" }, null, 2)\n  );\n  return 0;\n}\n", "/**\n * Main implementation for the Google Calendar Extism Plugin.\n * This file contains the core implementation that processes the requests from the host.\n */\nimport { CallToolRequest, CallToolResult, ListToolsResult, Tool } from \"./pdk\";\n\nimport {\n  handleListEvents,\n  handleCreateEvent,\n  handleUpdateEvent,\n  handleDeleteEvent,\n} from \"./handlers/calendar\";\n\n/**\n * Implementation of the call function that routes requests to the appropriate handler.\n * @param request The request to process\n * @returns The result of processing the request\n */\nexport function callImpl(request: CallToolRequest): CallToolResult {\n  try {\n    // Set up input for the handlers\n    const originalInputString = Host.inputString;\n    let outputContent: string = \"\";\n\n    // Override Host.inputString and Host.outputString for the handlers\n    Host.inputString = () => JSON.stringify(request.arguments);\n    const originalOutputString = Host.outputString;\n    Host.outputString = (content: string) => {\n      outputContent = content;\n      return true;\n    };\n\n    let result: number = 1;\n\n    // Route the request to the appropriate handler based on the toolId\n    switch (request.toolId) {\n      case \"list_events\":\n        result = handleListEvents();\n        break;\n\n      case \"create_event\":\n        result = handleCreateEvent();\n        break;\n\n      case \"update_event\":\n        result = handleUpdateEvent();\n        break;\n\n      case \"delete_event\":\n        result = handleDeleteEvent();\n        break;\n\n      default:\n        // Restore original methods\n        Host.inputString = originalInputString;\n        Host.outputString = originalOutputString;\n        return new CallToolResult(\n          \"error\",\n          null,\n          `Unknown tool: ${request.toolId}`\n        );\n    }\n\n    // Restore original methods\n    Host.inputString = originalInputString;\n    Host.outputString = originalOutputString;\n\n    // Process result\n    if (result === 0) {\n      try {\n        const parsedOutput = JSON.parse(outputContent);\n        return new CallToolResult(\"success\", parsedOutput, undefined);\n      } catch (e) {\n        return new CallToolResult(\"success\", outputContent, undefined);\n      }\n    } else {\n      try {\n        const parsedError = JSON.parse(outputContent);\n        return new CallToolResult(\n          \"error\",\n          null,\n          parsedError.error || \"Unknown error\"\n        );\n      } catch (e) {\n        return new CallToolResult(\n          \"error\",\n          null,\n          \"Failed to process Calendar request\"\n        );\n      }\n    }\n  } catch (err) {\n    return new CallToolResult(\n      \"error\",\n      null,\n      `Error: ${err instanceof Error ? err.message : String(err)}`\n    );\n  }\n}\n\n/**\n * Implementation of the describe function that returns the list of available tools.\n * @returns A list of available tools in the OpenAI API tool format\n */\nexport function describeImpl(): ListToolsResult {\n  const tools = [\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"list_events\",\n        \"description\": \"Lists events from the user's Google Calendar\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"maxResults\": {\n              \"type\": \"integer\",\n              \"description\": \"Maximum number of events to return\"\n            },\n            \"daysBack\": {\n              \"type\": \"integer\",\n              \"description\": \"Number of days to look back\"\n            },\n            \"daysForward\": {\n              \"type\": \"integer\",\n              \"description\": \"Number of days to look forward\"\n            },\n            \"calendarId\": {\n              \"type\": \"string\",\n              \"description\": \"ID of the calendar to query, defaults to 'primary'\"\n            }\n          },\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"create_event\",\n        \"description\": \"Creates a new event in the user's Google Calendar\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"summary\": {\n              \"type\": \"string\",\n              \"description\": \"Event title\"\n            },\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"Event location\"\n            },\n            \"description\": {\n              \"type\": \"string\",\n              \"description\": \"Event description\"\n            },\n            \"start\": {\n              \"type\": \"string\",\n              \"description\": \"Start time (ISO format)\"\n            },\n            \"end\": {\n              \"type\": \"string\",\n              \"description\": \"End time (ISO format)\"\n            },\n            \"attendees\": {\n              \"type\": \"array\",\n              \"description\": \"List of attendee email addresses\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"includeGoogleMeetDetails\": {\n              \"type\": \"boolean\",\n              \"description\": \"Whether to include Google Meet details\"\n            }\n          },\n          \"required\": [\"summary\", \"start\", \"end\"]\n        }\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"update_event\",\n        \"description\": \"Updates an existing event in the user's Google Calendar\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"eventId\": {\n              \"type\": \"string\",\n              \"description\": \"ID of the event to update\"\n            },\n            \"summary\": {\n              \"type\": \"string\",\n              \"description\": \"Event title\"\n            },\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"Event location\"\n            },\n            \"description\": {\n              \"type\": \"string\",\n              \"description\": \"Event description\"\n            },\n            \"start\": {\n              \"type\": \"string\",\n              \"description\": \"Start time (ISO format)\"\n            },\n            \"end\": {\n              \"type\": \"string\",\n              \"description\": \"End time (ISO format)\"\n            },\n            \"attendees\": {\n              \"type\": \"array\",\n              \"description\": \"List of attendee email addresses\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"includeGoogleMeetDetails\": {\n              \"type\": \"boolean\",\n              \"description\": \"Whether to include Google Meet details\"\n            }\n          },\n          \"required\": [\"eventId\"]\n        }\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"delete_event\",\n        \"description\": \"Deletes an event from the user's Google Calendar\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"eventId\": {\n              \"type\": \"string\",\n              \"description\": \"ID of the event to delete\"\n            }\n          },\n          \"required\": [\"eventId\"]\n        }\n      }\n    }\n  ];\n\n  return new ListToolsResult(tools);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACQO,IAAM,kBAAN,MAAsB;AAAA,EAI3B,YAAY,QAAgB,YAAiC;AAC3D,SAAK,SAAS;AACd,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,OAAO,SAAS,MAA4B;AAC1C,WAAO,IAAI,gBAAgB,KAAK,QAAQ,KAAK,aAAa,CAAC,CAAC;AAAA,EAC9D;AAAA,EAEA,OAAO,OAAO,SAA+B;AAC3C,WAAO;AAAA,MACL,QAAQ,QAAQ;AAAA,MAChB,WAAW,QAAQ;AAAA,IACrB;AAAA,EACF;AACF;AAKO,IAAM,iBAAN,MAAqB;AAAA,EAK1B,YAAY,OAAe,QAAa,OAAgB;AACtD,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,OAAO,SAAS,MAA2B;AACzC,WAAO,IAAI,eAAe,KAAK,OAAO,KAAK,QAAQ,KAAK,KAAK;AAAA,EAC/D;AAAA,EAEA,OAAO,OAAO,QAA6B;AACzC,UAAM,OAAY;AAAA,MAChB,OAAO,OAAO;AAAA,MACd,QAAQ,OAAO;AAAA,IACjB;AACA,QAAI,OAAO,OAAO;AAChB,WAAK,QAAQ,OAAO;AAAA,IACtB;AACA,WAAO;AAAA,EACT;AACF;AAwCO,IAAM,kBAAN,MAAsB;AAAA,EAG3B,YAAY,OAAc;AACxB,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,OAAO,SAAS,MAA4B;AAC1C,WAAO,IAAI,gBAAgB,KAAK,SAAS,CAAC,CAAC;AAAA,EAC7C;AAAA,EAEA,OAAO,OAAO,QAA8B;AAC1C,WAAO;AAAA,MACL,OAAO,OAAO;AAAA,IAChB;AAAA,EACF;AACF;;;ACrGA,SAAS,UAAsB;AAC7B,MAAI;AACF,UAAM,QAAQ,KAAK,YAAY;AAC/B,UAAM,OAAO,KAAK,MAAM,KAAK;AAC7B,WAAO;AAAA,EACT,SAAS,KAAP;AACA,SAAK,aAAa,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC,CAAC;AACjE,WAAO;AAAA,EACT;AACF;AAKA,SAAS,kBAAkB,UAAmB,aAAsB;AAClE,QAAM,UACJ,aAAa,SACT,IAAI,KAAK,KAAK,IAAI,IAAI,MAAO,KAAK,KAAK,KAAK,QAAQ,EAAE,YAAY,IAClE;AAEN,QAAM,UACJ,gBAAgB,SACZ,IAAI,KAAK,KAAK,IAAI,IAAI,MAAO,KAAK,KAAK,KAAK,WAAW,EAAE,YAAY,IACrE;AAEN,SAAO,EAAE,SAAS,QAAQ;AAC5B;AAQO,SAAS,mBAA2B;AACzC,MAAI;AACF,UAAM,cAAc,OAAO,IAAI,qBAAqB;AACpD,QAAI,CAAC,aAAa;AAChB,WAAK;AAAA,QACH,KAAK,UAAU;AAAA,UACb,OAAO;AAAA,QACT,CAAC;AAAA,MACH;AACA,aAAO;AAAA,IACT;AAEA,UAAM,OAAO,QAAQ;AACrB,QAAI,CAAC;AAAM,aAAO;AAElB,UAAM,EAAE,aAAa,IAAI,UAAU,aAAa,aAAa,UAAU,IAAI;AAC3E,UAAM,EAAE,SAAS,QAAQ,IAAI,kBAAkB,UAAU,WAAW;AAGpE,QAAI,MAAM,oDAAoD,mBAAmB,UAAU,uBAAuB;AAClH,QAAI;AAAS,aAAO,YAAY,mBAAmB,OAAO;AAC1D,QAAI;AAAS,aAAO,YAAY,mBAAmB,OAAO;AAC1D,WAAO;AAEP,UAAM,WAAW,KAAK,QAAQ;AAAA,MAC5B;AAAA,MACA,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,eAAe,UAAU;AAAA,QACzB,gBAAgB;AAAA,MAClB;AAAA,IACF,CAAC;AAED,QAAI,SAAS,WAAW,KAAK;AAC3B,WAAK;AAAA,QACH,KAAK,UAAU;AAAA,UACb,OAAO,0BAA0B,SAAS;AAAA,UAC1C,QAAQ,SAAS;AAAA,QACnB,CAAC;AAAA,MACH;AACA,aAAO;AAAA,IACT;AAEA,QAAI;AACJ,QAAI;AACF,aAAO,KAAK,MAAM,SAAS,IAAI;AAG/B,YAAM,SAAS,KAAK,MAAM,IAAI,CAAC,UAAe;AAC5C,eAAO;AAAA,UACL,IAAI,MAAM;AAAA,UACV,SAAS,MAAM;AAAA,UACf,aAAa,MAAM;AAAA,UACnB,UAAU,MAAM;AAAA,UAChB,OAAO,MAAM;AAAA,UACb,KAAK,MAAM;AAAA,UACX,WAAW,MAAM;AAAA,UACjB,WAAW,MAAM;AAAA,UACjB,UAAU,MAAM;AAAA,UAChB,gBAAgB,MAAM;AAAA,QACxB;AAAA,MACF,CAAC;AAED,WAAK;AAAA,QACH,KAAK;AAAA,UACH;AAAA,YACE;AAAA,YACA,eAAe,KAAK;AAAA,UACtB;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT,SAAS,KAAP;AACA,WAAK;AAAA,QACH,KAAK,UAAU;AAAA,UACb,OAAO;AAAA,UACP,SAAS,eAAe,QAAQ,IAAI,UAAU,OAAO,GAAG;AAAA,QAC1D,CAAC;AAAA,MACH;AACA,aAAO;AAAA,IACT;AAAA,EACF,SAAS,OAAP;AACA,SAAK;AAAA,MACH,KAAK,UAAU;AAAA,QACb,OAAO,yBAAyB,MAAM,WAAW;AAAA,MACnD,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AACF;AAOO,SAAS,oBAA4B;AAC1C,QAAM,cAAc,OAAO,IAAI,qBAAqB;AAEpD,QAAM,OAAO,QAAQ;AACrB,MAAI,CAAC;AAAM,WAAO;AAElB,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,YAAY,CAAC;AAAA,IACb,2BAA2B;AAAA,EAC7B,IAAI;AAGJ,MAAI,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK;AAC9B,SAAK;AAAA,MACH,KAAK,UAAU;AAAA,QACb,OACE;AAAA,MACJ,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AAGA,QAAM,sBAAsB,2BACxB,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,GAAG,EAAE,IAC1C,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,GAAG,EAAE,IAC1C;AAEJ,QAAM,QAAQ;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,MACV,UAAU;AAAA;AAAA,IACZ;AAAA,IACA,KAAK;AAAA,MACH,UAAU;AAAA,MACV,UAAU;AAAA;AAAA,IACZ;AAAA,IACA,WAAW,UAAU,IAAI,CAAC,WAAmB,EAAE,MAAM,EAAE;AAAA,IACvD,gBAAgB,2BACZ;AAAA,MACE,eAAe;AAAA,QACb,uBAAuB;AAAA,UACrB,MAAM;AAAA,QACR;AAAA,QACA,WAAW;AAAA,MACb;AAAA,IACF,IACA;AAAA,EACN;AAEA,QAAM,wBAAwB,2BAA2B,MAAM;AAE/D,QAAM,WAAW,KAAK;AAAA,IACpB;AAAA,MACE,KAAK,yFAAyF;AAAA,MAC9F,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,eAAe,UAAU;AAAA,QACzB,gBAAgB;AAAA,MAClB;AAAA,IACF;AAAA,IACA,KAAK,UAAU,KAAK;AAAA,EACtB;AAEA,MAAI,SAAS,WAAW,KAAK;AAC3B,SAAK;AAAA,MACH,KAAK,UAAU,EAAE,OAAO,2BAA2B,SAAS,OAAO,CAAC;AAAA,IACtE;AACA,WAAO;AAAA,EACT;AAEA,MAAI;AACJ,MAAI;AACF,WAAO,KAAK,MAAM,SAAS,IAAI;AAAA,EACjC,SAAS,KAAP;AACA,SAAK;AAAA,MACH,KAAK,UAAU,EAAE,OAAO,4CAA4C,CAAC;AAAA,IACvE;AACA,WAAO;AAAA,EACT;AAEA,OAAK;AAAA,IACH,KAAK;AAAA,MACH,EAAE,IAAI,KAAK,IAAI,SAAS,6BAA6B;AAAA,MACrD;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAOO,SAAS,oBAA4B;AAC1C,QAAM,cAAc,OAAO,IAAI,qBAAqB;AAEpD,QAAM,OAAO,QAAQ;AACrB,MAAI,CAAC;AAAM,WAAO;AAElB,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,2BAA2B;AAAA,EAC7B,IAAI;AAGJ,MAAI,CAAC,SAAS;AACZ,SAAK;AAAA,MACH,KAAK,UAAU,EAAE,OAAO,sCAAsC,CAAC;AAAA,IACjE;AACA,WAAO;AAAA,EACT;AAEA,QAAM,QAAa,CAAC;AACpB,MAAI,YAAY;AAAW,UAAM,UAAU;AAC3C,MAAI,aAAa;AAAW,UAAM,WAAW;AAC7C,MAAI,gBAAgB;AAAW,UAAM,cAAc;AAEnD,MAAI,UAAU,QAAW;AACvB,UAAM,QAAQ;AAAA,MACZ,UAAU;AAAA,MACV,UAAU;AAAA;AAAA,IACZ;AAAA,EACF;AAEA,MAAI,QAAQ,QAAW;AACrB,UAAM,MAAM;AAAA,MACV,UAAU;AAAA,MACV,UAAU;AAAA;AAAA,IACZ;AAAA,EACF;AAEA,MAAI,cAAc,QAAW;AAC3B,UAAM,YAAY,UAAU,IAAI,CAAC,WAAmB,EAAE,MAAM,EAAE;AAAA,EAChE;AAEA,QAAM,wBAAwB,2BAA2B,MAAM;AAE/D,QAAM,WAAW,KAAK;AAAA,IACpB;AAAA,MACE,KAAK,mEAAmE,iCAAiC;AAAA,MACzG,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,eAAe,UAAU;AAAA,QACzB,gBAAgB;AAAA,MAClB;AAAA,IACF;AAAA,IACA,KAAK,UAAU,KAAK;AAAA,EACtB;AAEA,MAAI,SAAS,WAAW,KAAK;AAC3B,SAAK;AAAA,MACH,KAAK,UAAU,EAAE,OAAO,2BAA2B,SAAS,OAAO,CAAC;AAAA,IACtE;AACA,WAAO;AAAA,EACT;AAEA,MAAI;AACJ,MAAI;AACF,WAAO,KAAK,MAAM,SAAS,IAAI;AAAA,EACjC,SAAS,KAAP;AACA,SAAK;AAAA,MACH,KAAK,UAAU,EAAE,OAAO,4CAA4C,CAAC;AAAA,IACvE;AACA,WAAO;AAAA,EACT;AAEA,OAAK;AAAA,IACH,KAAK;AAAA,MACH,EAAE,IAAI,KAAK,IAAI,SAAS,6BAA6B;AAAA,MACrD;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAOO,SAAS,oBAA4B;AAC1C,QAAM,cAAc,OAAO,IAAI,qBAAqB;AAEpD,QAAM,OAAO,QAAQ;AACrB,MAAI,CAAC;AAAM,WAAO;AAElB,QAAM,EAAE,QAAQ,IAAI;AAGpB,MAAI,CAAC,SAAS;AACZ,SAAK;AAAA,MACH,KAAK,UAAU,EAAE,OAAO,sCAAsC,CAAC;AAAA,IACjE;AACA,WAAO;AAAA,EACT;AAEA,QAAM,WAAW,KAAK,QAAQ;AAAA,IAC5B,KAAK,mEAAmE;AAAA,IACxE,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,eAAe,UAAU;AAAA,IAC3B;AAAA,EACF,CAAC;AAED,MAAI,SAAS,WAAW,OAAO,SAAS,WAAW,KAAK;AACtD,SAAK;AAAA,MACH,KAAK,UAAU,EAAE,OAAO,2BAA2B,SAAS,OAAO,CAAC;AAAA,IACtE;AACA,WAAO;AAAA,EACT;AAEA,OAAK;AAAA,IACH,KAAK,UAAU,EAAE,SAAS,6BAA6B,GAAG,MAAM,CAAC;AAAA,EACnE;AACA,SAAO;AACT;;;ACvWO,SAAS,SAAS,SAA0C;AACjE,MAAI;AAEF,UAAM,sBAAsB,KAAK;AACjC,QAAI,gBAAwB;AAG5B,SAAK,cAAc,MAAM,KAAK,UAAU,QAAQ,SAAS;AACzD,UAAM,uBAAuB,KAAK;AAClC,SAAK,eAAe,CAAC,YAAoB;AACvC,sBAAgB;AAChB,aAAO;AAAA,IACT;AAEA,QAAI,SAAiB;AAGrB,YAAQ,QAAQ,QAAQ;AAAA,MACtB,KAAK;AACH,iBAAS,iBAAiB;AAC1B;AAAA,MAEF,KAAK;AACH,iBAAS,kBAAkB;AAC3B;AAAA,MAEF,KAAK;AACH,iBAAS,kBAAkB;AAC3B;AAAA,MAEF,KAAK;AACH,iBAAS,kBAAkB;AAC3B;AAAA,MAEF;AAEE,aAAK,cAAc;AACnB,aAAK,eAAe;AACpB,eAAO,IAAI;AAAA,UACT;AAAA,UACA;AAAA,UACA,iBAAiB,QAAQ;AAAA,QAC3B;AAAA,IACJ;AAGA,SAAK,cAAc;AACnB,SAAK,eAAe;AAGpB,QAAI,WAAW,GAAG;AAChB,UAAI;AACF,cAAM,eAAe,KAAK,MAAM,aAAa;AAC7C,eAAO,IAAI,eAAe,WAAW,cAAc,MAAS;AAAA,MAC9D,SAAS,GAAP;AACA,eAAO,IAAI,eAAe,WAAW,eAAe,MAAS;AAAA,MAC/D;AAAA,IACF,OAAO;AACL,UAAI;AACF,cAAM,cAAc,KAAK,MAAM,aAAa;AAC5C,eAAO,IAAI;AAAA,UACT;AAAA,UACA;AAAA,UACA,YAAY,SAAS;AAAA,QACvB;AAAA,MACF,SAAS,GAAP;AACA,eAAO,IAAI;AAAA,UACT;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF,SAAS,KAAP;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,MACA,UAAU,eAAe,QAAQ,IAAI,UAAU,OAAO,GAAG;AAAA,IAC3D;AAAA,EACF;AACF;AAMO,SAAS,eAAgC;AAC9C,QAAM,QAAQ;AAAA,IACZ;AAAA,MACE,QAAQ;AAAA,MACR,YAAY;AAAA,QACV,QAAQ;AAAA,QACR,eAAe;AAAA,QACf,cAAc;AAAA,UACZ,QAAQ;AAAA,UACR,cAAc;AAAA,YACZ,cAAc;AAAA,cACZ,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,YAAY;AAAA,cACV,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,eAAe;AAAA,cACb,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,cAAc;AAAA,cACZ,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,UACF;AAAA,UACA,YAAY,CAAC;AAAA,QACf;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,YAAY;AAAA,QACV,QAAQ;AAAA,QACR,eAAe;AAAA,QACf,cAAc;AAAA,UACZ,QAAQ;AAAA,UACR,cAAc;AAAA,YACZ,WAAW;AAAA,cACT,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,YAAY;AAAA,cACV,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,eAAe;AAAA,cACb,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,SAAS;AAAA,cACP,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,OAAO;AAAA,cACL,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,aAAa;AAAA,cACX,QAAQ;AAAA,cACR,eAAe;AAAA,cACf,SAAS;AAAA,gBACP,QAAQ;AAAA,cACV;AAAA,YACF;AAAA,YACA,4BAA4B;AAAA,cAC1B,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,UACF;AAAA,UACA,YAAY,CAAC,WAAW,SAAS,KAAK;AAAA,QACxC;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,YAAY;AAAA,QACV,QAAQ;AAAA,QACR,eAAe;AAAA,QACf,cAAc;AAAA,UACZ,QAAQ;AAAA,UACR,cAAc;AAAA,YACZ,WAAW;AAAA,cACT,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,WAAW;AAAA,cACT,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,YAAY;AAAA,cACV,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,eAAe;AAAA,cACb,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,SAAS;AAAA,cACP,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,OAAO;AAAA,cACL,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,YACA,aAAa;AAAA,cACX,QAAQ;AAAA,cACR,eAAe;AAAA,cACf,SAAS;AAAA,gBACP,QAAQ;AAAA,cACV;AAAA,YACF;AAAA,YACA,4BAA4B;AAAA,cAC1B,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,UACF;AAAA,UACA,YAAY,CAAC,SAAS;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,YAAY;AAAA,QACV,QAAQ;AAAA,QACR,eAAe;AAAA,QACf,cAAc;AAAA,UACZ,QAAQ;AAAA,UACR,cAAc;AAAA,YACZ,WAAW;AAAA,cACT,QAAQ;AAAA,cACR,eAAe;AAAA,YACjB;AAAA,UACF;AAAA,UACA,YAAY,CAAC,SAAS;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAO,IAAI,gBAAgB,KAAK;AAClC;;;AHnPO,SAAS,OAAe;AAC7B,QAAM,eAAe,KAAK,MAAM,KAAK,YAAY,CAAC;AAClD,QAAM,QAAQ,gBAAgB,SAAS,YAAY;AAEnD,QAAM,SAAc,SAAS,KAAK;AAElC,QAAM,gBAAgB,eAAe,OAAO,MAAM;AAClD,OAAK,aAAa,KAAK,UAAU,aAAa,CAAC;AAE/C,SAAO;AACT;AAEO,SAAS,WAAmB;AACjC,QAAM,SAAc,aAAa;AAEjC,QAAM,gBAAgB,gBAAgB,OAAO,MAAM;AACnD,OAAK,aAAa,KAAK,UAAU,aAAa,CAAC;AAE/C,SAAO;AACT;",
  "names": []
}
